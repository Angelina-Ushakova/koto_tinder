// Mocks generated by Mockito 5.4.6 from annotations
// in koto_tinder/test/home_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:koto_tinder/domain/entities/cat.dart' as _i3;
import 'package:koto_tinder/domain/repositories/cat_repository.dart' as _i2;
import 'package:koto_tinder/domain/usecases/get_liked_cats.dart' as _i7;
import 'package:koto_tinder/domain/usecases/get_random_cat.dart' as _i4;
import 'package:koto_tinder/domain/usecases/like_cat.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCatRepository_0 extends _i1.SmartFake implements _i2.CatRepository {
  _FakeCatRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCat_1 extends _i1.SmartFake implements _i3.Cat {
  _FakeCat_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetRandomCatUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRandomCatUseCase extends _i1.Mock
    implements _i4.GetRandomCatUseCase {
  MockGetRandomCatUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CatRepository get catRepository =>
      (super.noSuchMethod(
            Invocation.getter(#catRepository),
            returnValue: _FakeCatRepository_0(
              this,
              Invocation.getter(#catRepository),
            ),
          )
          as _i2.CatRepository);

  @override
  _i5.Future<_i3.Cat> execute() =>
      (super.noSuchMethod(
            Invocation.method(#execute, []),
            returnValue: _i5.Future<_i3.Cat>.value(
              _FakeCat_1(this, Invocation.method(#execute, [])),
            ),
          )
          as _i5.Future<_i3.Cat>);
}

/// A class which mocks [LikeCatUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLikeCatUseCase extends _i1.Mock implements _i6.LikeCatUseCase {
  MockLikeCatUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CatRepository get catRepository =>
      (super.noSuchMethod(
            Invocation.getter(#catRepository),
            returnValue: _FakeCatRepository_0(
              this,
              Invocation.getter(#catRepository),
            ),
          )
          as _i2.CatRepository);

  @override
  _i5.Future<void> execute(_i3.Cat? cat) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [cat]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [GetLikedCatsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetLikedCatsUseCase extends _i1.Mock
    implements _i7.GetLikedCatsUseCase {
  MockGetLikedCatsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CatRepository get catRepository =>
      (super.noSuchMethod(
            Invocation.getter(#catRepository),
            returnValue: _FakeCatRepository_0(
              this,
              Invocation.getter(#catRepository),
            ),
          )
          as _i2.CatRepository);

  @override
  _i5.Future<List<_i3.Cat>> execute() =>
      (super.noSuchMethod(
            Invocation.method(#execute, []),
            returnValue: _i5.Future<List<_i3.Cat>>.value(<_i3.Cat>[]),
          )
          as _i5.Future<List<_i3.Cat>>);

  @override
  _i5.Future<List<_i3.Cat>> executeByBreed(String? breed) =>
      (super.noSuchMethod(
            Invocation.method(#executeByBreed, [breed]),
            returnValue: _i5.Future<List<_i3.Cat>>.value(<_i3.Cat>[]),
          )
          as _i5.Future<List<_i3.Cat>>);
}
